<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/public/stylesheets/style.css;C:/Users/danma/IdeaProjects/ServerSideNew/routes/index.js;C:/Users/danma/IdeaProjects/ServerSideNew/routes/users.js;C:/Users/danma/IdeaProjects/ServerSideNew/app.js;C:/Users/danma/IdeaProjects/ServerSideNew/package-lock.json;C:/Users/danma/IdeaProjects/ServerSideNew/package.json" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;/home/daniel/WebstormProjects/ServerSideProjectFinalFR&quot;:&quot;{\&quot;/routes/api.js\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`router.post(\\u0027/add\\u0027, async (req, res) \\u003d\\u003e { ... })`: This function handles the addition of a new cost item to the database, checking if the user exists before creating the new cost.\\n\\n`router.get(\\u0027/report\\u0027, async (req, res) \\u003d\\u003e { ... })`: This function generates a report of costs for a given user, year, and month, filtering the costs by category and returning the report.\\n\\n`router.get(\\u0027/users/:id\\u0027, async (req, res) \\u003d\\u003e { ... })`: This function retrieves information about a specific user, including their total costs.\\n\\n`router.get(\\u0027/about\\u0027, (req, res) \\u003d\\u003e { ... })`: This function returns information about the team members.\\n\\nOverall, this file defines the routes and handlers for a cost tracking application, allowing users to add costs, generate reports, and retrieve user information.\&quot;,\&quot;/tests/testHaim.py\&quot;:\&quot;This file does not contain any classes or functions. It is a Python script that performs the following tasks:\\n\\n1. Prompts the user to enter a filename.\\n2. Sends HTTP requests to a local server at `http://localhost:3000` to perform various operations:\\n   - Retrieves information about the \\\&quot;about\\\&quot; page.\\n   - Retrieves a report with a specific ID, year, and month.\\n   - Adds a new cost item with a description, category, and sum.\\n3. The responses from the server are printed to the specified output file.\&quot;,\&quot;/config/database.js\&quot;:\&quot;This file does not contain any classes or functions. Instead, it exports a single function `connectDB` that establishes a connection to a MongoDB database using the `mongoose` library. The function reads the MongoDB connection URI from an environment variable (`MONGODB_URI`) and attempts to connect to the database. If the connection is successful, it logs a message to the console. If there is an error, it logs the error message and exits the process.\&quot;,\&quot;/models/cost.js\&quot;:\&quot;This file defines a Mongoose schema for a \\\&quot;Cost\\\&quot; model, which represents a cost entry in a financial tracking application. The schema includes fields for the cost description, category, user ID, sum, and date. The file exports the \\\&quot;Cost\\\&quot; model, which can be used to interact with the corresponding MongoDB collection.\\n\\n{`mongoose.Schema`}: Defines the structure of the \\\&quot;Cost\\\&quot; document, including the required fields and their data types.\\n\\n{`mongoose.model`}: Creates a Mongoose model for the \\\&quot;Cost\\\&quot; schema, which can be used to interact with the corresponding MongoDB collection.\&quot;,\&quot;/models/user.js\&quot;:\&quot;This file defines a Mongoose schema for a `User` model. It does not contain any classes or functions, but rather sets up the structure of the `User` document in a MongoDB database.\\n\\nThe file exports the `User` model, which can be used to create, read, update, and delete user documents in the database.\&quot;,\&quot;/public/stylesheets/style.css\&quot;:\&quot;This file appears to be a CSS (Cascading Style Sheet) file that defines the styles for a web page. It does not contain any classes or functions, but rather sets the overall styles for the page.\\n\\n`body`: Applies a 50-pixel padding and sets the font to \\\&quot;Lucida Grande\\\&quot;, Helvetica, Arial, or a generic sans-serif font.\\n\\n`a`: Sets the color of all links on the page to the hex value `#00B7FF`.\\n\\nIn summary, this CSS file sets the basic styles for the body and links of a web page, providing a consistent visual appearance.\&quot;,\&quot;/routes/users.js\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`router.get(\\u0027/\\u0027, function(req, res, next) { ... })`: This function handles the GET request to the root URL of the users route and sends a response with the message \\\&quot;respond with a resource\\\&quot;.\\n\\nThe file sets up an Express router for handling requests related to users. It exports the router module, which can be used in other parts of the application.\&quot;,\&quot;/package.json\&quot;:\&quot;This file appears to be a package.json file, which is a configuration file for a Node.js project. It does not contain any classes or functions, but rather defines the project\\u0027s dependencies, scripts, and other metadata. Here\\u0027s a summary of the file:\\n\\n`package.json`: This file defines the configuration and dependencies for a Node.js project, including the project name, version, private status, scripts, and dependencies.\\n\\nThe scripts section defines the following commands:\\n- `start`: Starts the server by running the `./bin/www` file.\\n- `test`: Runs the Jest testing framework.\\n- `test:watch`: Runs the Jest testing framework in watch mode.\\n\\nThe dependencies section lists the required packages for the project, including Express, Mongoose, and other utilities.\\n\\nThe devDependencies section lists the packages required for development, such as Jest and Supertest.\&quot;,\&quot;/package-lock.json\&quot;:\&quot;This file appears to be a package.json file for a Node.js project. It does not contain any classes or functions, but rather lists the dependencies and devDependencies for the project, as well as some metadata about the project.\\n\\nThe file sets up the project with the following dependencies:\\n\\n`cookie-parser`: Middleware for parsing cookies in HTTP requests.\\n`cors`: Middleware for enabling CORS with various options.\\n`debug`: Debugging utility for Node.js applications.\\n`dotenv`: Loads environment variables from a `.env` file.\\n`express`: Web application framework for Node.js.\\n`http-errors`: Middleware for creating HTTP error objects.\\n`mongoose`: Object data modeling (ODM) library for MongoDB and Node.js.\\n`morgan`: HTTP request logger middleware for Node.js.\\n`pug`: Template engine for rendering HTML.\\n\\nThe file also includes the following devDependencies:\\n\\n`jest`: JavaScript testing framework.\\n`supertest`: Library for testing HTTP servers using Express.\\n\\nOverall, this file sets up the dependencies and devDependencies for a Node.js project that likely uses Express and Mongoose to build a web application.\&quot;,\&quot;/app.js\&quot;:\&quot;This file is an Express.js application that sets up a web server and configures various middleware and routes. It does not contain any classes, but it has the following functions:\\n\\n`connectDB`: Connects the application to a MongoDB database.\\n\\n`createError`: Creates an HTTP error object.\\n\\n`logger`: Logs requests and responses to the console.\\n\\n`app.use(cors())`: Enables CORS (Cross-Origin Resource Sharing) for the application.\\n\\n`app.use(\\u0027/api\\u0027, apiRoutes)`: Mounts the API routes defined in the `./routes/api` module.\\n\\n`app.use(\\u0027/\\u0027, indexRouter)`: Mounts the index routes defined in the `./routes/index` module.\\n\\n`app.use(\\u0027/users\\u0027, usersRouter)`: Mounts the user routes defined in the `./routes/users` module.\\n\\n`app.use(function(req, res, next) { ... })`: Handles 404 errors and forwards them to the error handler.\\n\\n`app.use(function(err, req, res, next) { ... })`: Handles errors and renders an error page.\&quot;,\&quot;/routes/index.js\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`router.get(\\u0027/\\u0027)`: This function handles the GET request for the root URL and renders the \\u0027index\\u0027 view with the title \\u0027Express\\u0027.\\n\\nIn summary, this file sets up a basic Express.js route that responds to the root URL with a rendered \\u0027index\\u0027 view.\&quot;}&quot;}" />
    <option name="fileSkeletonMaps" value="{&quot;/home/daniel/WebstormProjects/ServerSideProjectFinalFR&quot;:&quot;{\&quot;/config/database.js\&quot;:{\&quot;file_path\&quot;:\&quot;/config/database.js\&quot;,\&quot;file_name\&quot;:\&quot;database.js\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;connectDB\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[3,0],[11,2]],\&quot;indexes\&quot;:[67,331]}]},\&quot;/models/cost.js\&quot;:{\&quot;file_path\&quot;:\&quot;/models/cost.js\&quot;,\&quot;file_name\&quot;:\&quot;cost.js\&quot;,\&quot;methods\&quot;:[]},\&quot;/models/user.js\&quot;:{\&quot;file_path\&quot;:\&quot;/models/user.js\&quot;,\&quot;file_name\&quot;:\&quot;user.js\&quot;,\&quot;methods\&quot;:[]},\&quot;/public/stylesheets/style.css\&quot;:{\&quot;file_path\&quot;:\&quot;/public/stylesheets/style.css\&quot;,\&quot;file_name\&quot;:\&quot;style.css\&quot;,\&quot;methods\&quot;:[]},\&quot;/routes/api.js\&quot;:{\&quot;file_path\&quot;:\&quot;/routes/api.js\&quot;,\&quot;file_name\&quot;:\&quot;api.js\&quot;,\&quot;methods\&quot;:[]},\&quot;/routes/index.js\&quot;:{\&quot;file_path\&quot;:\&quot;/routes/index.js\&quot;,\&quot;file_name\&quot;:\&quot;index.js\&quot;,\&quot;methods\&quot;:[]},\&quot;/routes/users.js\&quot;:{\&quot;file_path\&quot;:\&quot;/routes/users.js\&quot;,\&quot;file_name\&quot;:\&quot;users.js\&quot;,\&quot;methods\&quot;:[]},\&quot;/tests/testHaim.py\&quot;:{\&quot;file_path\&quot;:\&quot;/tests/testHaim.py\&quot;,\&quot;file_name\&quot;:\&quot;testHaim.py\&quot;,\&quot;methods\&quot;:[]},\&quot;/app.js\&quot;:{\&quot;file_path\&quot;:\&quot;/app.js\&quot;,\&quot;file_name\&quot;:\&quot;app.js\&quot;,\&quot;methods\&quot;:[]},\&quot;/package-lock.json\&quot;:{\&quot;file_path\&quot;:\&quot;/package-lock.json\&quot;,\&quot;file_name\&quot;:\&quot;package-lock.json\&quot;,\&quot;methods\&quot;:[]},\&quot;/package.json\&quot;:{\&quot;file_path\&quot;:\&quot;/package.json\&quot;,\&quot;file_name\&quot;:\&quot;package.json\&quot;,\&quot;methods\&quot;:[]}}&quot;}" />
  </component>
</project>